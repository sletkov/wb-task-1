package main

import "fmt"

//Реализовать быструю сортировку массива (quicksort) встроенными методами языка.
func main() {
	arr := []int{6, 42, 1127, 1, 5, 6, 5, 1, 2, 3, 23, 32, 44, 4, 5, 91, 413, 42, 3, 90}
	quicksort(arr, 0, len(arr)-1)
	fmt.Println(arr)
}

//Алгоритм быстрой сортировки относится к алгоритмам парадигмы "разделяй и властвуй"
//Cначала нужно выбрать некоторый опорный элемент, потом сделать перестановки в массиве,
//такие что элементы, меньшие чем опорный становятся слева, а большие чем опорный - справа от опорного
//Потом рекурсивно повторить алгоритм для подмассива меньших элементов, чем опорный и подмассива больших элементов, чем опорный.
//В конце концов мы получим отсортированный массив
//Алгоритм быстрой сортировки в среднем работает за время O(NLogN)
func quicksort(arr []int, low int, high int) {
	if low < high {
		//Выбираем опорный элемент и делаем перестановки в массиве, такие что
		//слева от опорного становятся элементы меньшие чем опорный, а справа элементы большие чем опорный
		pivot := partition(arr, low, high)

		//Рекурсивно вызываем функцию для элементов слева от опорного
		quicksort(arr, low, pivot-1)
		//Рекурсивно вызываем функцию для элементов справа от опорного
		quicksort(arr, pivot+1, high)
	}
}

//Функция отвечает за выбор опорного элемента и перестановки в массиве
func partition(arr []int, low int, high int) int {
	//Присваиваем опорному элементу значение последнего элемента массива
	pivot := arr[high]

	//индекс, регулирующий куда ставить элемент, меньше опорного
	i := low - 1
	//В цикле пройдемся по всем элементам массива, если элемент меньше опорного
	//меняем его местами с элементом, который стоит в начале
	for j := low; j < high; j++ {
		if arr[j] < pivot {
			i++
			arr[i], arr[j] = arr[j], arr[i]
		}
	}

	//Ставим опорный элемент после значений, которые мы переносили в начало
	arr[i+1], arr[high] = arr[high], arr[i+1]

	//Возвращаем опорный элемент
	return i + 1
}
