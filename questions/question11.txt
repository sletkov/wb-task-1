11.	Что выведет данная программа и почему?


func main() {
  wg := sync.WaitGroup{} //можно было не инициализировать переменную, достаточно было бы нулевого значения sync.WaitGroup
  for i := 0; i < 5; i++ {
     wg.Add(1) //за цикл 5 раз увеличиваем кол-во горутин, которых ждет WaitGroup, 
     //но нигде не уменьшаем это кол-во, WaitGroup будет ждать вечно и возникнет deadlock
     go func(wg sync.WaitGroup, i int) {
        fmt.Println(i)//Печатаем значение i
        wg.Done() //уменьшаем на 1 кол-во горутин, которые ждет wg внутри scope функции, хотя эта wg ничего не ждет
     }(wg, i) // так как wg хранит не ссылку, а значение при передаче wg в качестве аргумента 
     //функция скопирует значение wg в свой scope, и будет работать с ним, а не с wg на верхнем уровне
  }

  wg.Wait() // wg ждет 5 горутин, но так и не дожидается
  fmt.Println("exit") // сюда мы не дойдем
}

Вывод программы:
0-4 в случайном порядке
fatal error: all goroutines are asleep - deadlock!